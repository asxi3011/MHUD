/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PlayFair;

import java.awt.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Objects;
import java.util.StringJoiner;

/**
 *
 * @author buile
 */
public class PlayFairForm extends javax.swing.JFrame {

    /**
     * Creates new form PlayFair
     */
    public PlayFairForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDecryption = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtKeyDecryption = new javax.swing.JTextField();
        btnEncryption = new javax.swing.JButton();
        lblKeyEncryption = new javax.swing.JLabel();
        txtKeyEncryption = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tareaKeyDecryption = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tereaDecryption = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        tareaEcryption = new javax.swing.JTextArea();
        btnGenerateKey = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tareaGenerateKeyEncryption = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnDecryption.setText("Decryption");
        btnDecryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptionActionPerformed(evt);
            }
        });

        jLabel2.setText("Key");

        btnEncryption.setText("Encryption");
        btnEncryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptionActionPerformed(evt);
            }
        });

        lblKeyEncryption.setText("Key");

        txtKeyEncryption.setName("txtKeyEncryption"); // NOI18N

        tareaKeyDecryption.setColumns(20);
        tareaKeyDecryption.setRows(5);
        jScrollPane1.setViewportView(tareaKeyDecryption);

        tereaDecryption.setColumns(20);
        tereaDecryption.setRows(5);
        jScrollPane2.setViewportView(tereaDecryption);

        tareaEcryption.setColumns(20);
        tareaEcryption.setRows(5);
        jScrollPane3.setViewportView(tareaEcryption);

        btnGenerateKey.setText("Generate Key");
        btnGenerateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateKeyActionPerformed(evt);
            }
        });

        tareaGenerateKeyEncryption.setColumns(20);
        tareaGenerateKeyEncryption.setRows(5);
        jScrollPane4.setViewportView(tareaGenerateKeyEncryption);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblKeyEncryption)
                        .addGap(36, 36, 36)
                        .addComponent(txtKeyEncryption)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGenerateKey, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                        .addGap(26, 26, 26)
                        .addComponent(btnEncryption, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(30, 30, 30)
                        .addComponent(txtKeyDecryption)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane4)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDecryption, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(37, 37, 37)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                    .addGap(277, 277, 277)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKeyEncryption)
                    .addComponent(txtKeyEncryption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEncryption)
                    .addComponent(btnGenerateKey))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtKeyDecryption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDecryption)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(169, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDecryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDecryptionActionPerformed

    private void btnEncryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptionActionPerformed
        // TODO add your handling code here:
        String keyEncryption = txtKeyEncryption.getText().toLowerCase();
        String[][] key = generateKey(keyEncryption);
        String plainText = tareaEcryption.getText();
        // same row +1 to the right, the col +1 to down side and final ref to index of eachother
        //if the plaintext split two word is dulicapte we have to insert into this the random word
        String splitInput = sperateString(plainText, 2);
        tereaDecryption.setText(splitInput);
    }//GEN-LAST:event_btnEncryptionActionPerformed
    private String sperateString(String stringInput, int numberSplitWord){
        String result = "";
        String[] stringInputArr = stringInput.split("");
        int subLength = 0;
        int realWord = 0;
        String prevWord = "";
        
        //split two word and re arrange 
        for(int counter =0; counter < stringInput.length(); counter++){
            if(subLength == numberSplitWord){
                subLength = 0;
                result += ",";
            }
            result += stringInputArr[counter];
            subLength++;
        }
        
        return result;
    }
    //work well
    private String[][] generateKey(String key){
        String[][] keyResult = new String[5][5];
        int col =0;
        int row = 0;
        String[] keyBaseGenerate = keyBase.split("");
        
        //distinct key Encryption
        String[] keyInput = Arrays.stream(key.split("")).distinct().toArray(String[]::new);
        boolean containsI = Arrays.stream(keyInput).anyMatch("i"::equals);
        boolean containsJ = Arrays.stream(keyInput).anyMatch("j"::equals);

        //Fillter keyBase
        for(int counter = 0; counter < keyInput.length; counter++){
            for(int index = 0; index < keyBaseGenerate.length; index++){
                if(Objects.equals(keyInput[counter], keyBaseGenerate[index])){
                    keyBaseGenerate[index] = null;
                }
            }
        }
        
        for(int counter = 0; counter < keyInput.length; ){
            if(col == 5){
                row += 1;
                col = 0;
            }
            if(Objects.equals(keyInput[counter], "j")){
                if(containsI && containsJ){
                    counter++;
                }
            }
            keyResult[row][col] = keyInput[counter];
            col++;
            counter++;
        }
        
            for(int counter = 0; counter < keyBaseGenerate.length;){
                if(col == 5 && row < 5){
                    row += 1;
                    col = 0;
                    if(row == 5){
                        break;
                    }
                }
                if(keyBaseGenerate[counter] == null){
                    counter++;
                }
                else{
                    keyResult[row][col] = keyBaseGenerate[counter];
                    col++;
                    counter++;
                }
                
           }

        return keyResult;
    }
    //work well
    private void btnGenerateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateKeyActionPerformed
        // TODO add your handling code here:
        String keyEncryption = txtKeyEncryption.getText().toLowerCase();
        String[][] key = generateKey(keyEncryption);
        
        tareaGenerateKeyEncryption.setText(Arrays.deepToString(key).replace("[", "").replace("]", "").replace(",",""));
    }//GEN-LAST:event_btnGenerateKeyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayFairForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayFairForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayFairForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayFairForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayFairForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDecryption;
    private javax.swing.JButton btnEncryption;
    private javax.swing.JButton btnGenerateKey;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblKeyEncryption;
    private javax.swing.JTextArea tareaEcryption;
    private javax.swing.JTextArea tareaGenerateKeyEncryption;
    private javax.swing.JTextArea tareaKeyDecryption;
    private javax.swing.JTextArea tereaDecryption;
    private javax.swing.JTextField txtKeyDecryption;
    private javax.swing.JTextField txtKeyEncryption;
    // End of variables declaration//GEN-END:variables
    private String keyBase = "abcdefghiklmnopqrstuvwxyz";
}
